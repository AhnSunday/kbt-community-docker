name: Deploy Frontend, Backend & Nginx to AWS ECR & EC2

on:
  push:
    branches:
      - main

jobs:
  build-and-push-frontend:
    name: Build & Push Frontend to ECR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Build and Push Frontend
        run: |
          cd 2-sunday-ahn-community-fe-react
          docker buildx build --platform linux/amd64 \
            --build-arg REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }} \
            --build-arg REACT_APP_BACKEND_PORT=${{ secrets.REACT_APP_BACKEND_PORT }} \
            -t ${{ secrets.ECR_REGISTRY }}/sunday/community-frontend:latest --push .

  build-and-push-backend:
    name: Build & Push Backend to ECR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Build and Push Backend
        run: |
          cd 2-sunday-ahn-community-be
          docker buildx build --platform linux/amd64 \
            -t ${{ secrets.ECR_REGISTRY }}/sunday/community-backend:latest --push .

  build-and-push-nginx:
    name: Build & Push Nginx to ECR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Build and Push Nginx
        run: |
          cd nginx
          docker buildx build --platform linux/amd64 \
            -t ${{ secrets.ECR_REGISTRY }}/sunday/community-nginx:latest --push .

  # deploy:
  #   name: Deploy to EC2
  #   runs-on: ubuntu-latest
  #   needs: [build-and-push-frontend, build-and-push-backend, build-and-push-nginx]
  #   steps:
  #     - name: SSH into EC2 and deploy
  #       uses: appleboy/ssh-action@v0.1.6
  #       with:
  #         host: ${{ secrets.EC2_HOST }}
  #         username: ubuntu
  #         key: ${{ secrets.EC2_SSH_KEY }}
  #         script: |
  #           aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

  #           # Pull new images
  #           docker pull ${{ secrets.ECR_REGISTRY }}/sunday/community-frontend:latest
  #           docker pull ${{ secrets.ECR_REGISTRY }}/sunday/community-backend:latest
  #           docker pull ${{ secrets.ECR_REGISTRY }}/sunday/community-nginx:latest

  #           # Stop and remove old containers
  #           docker stop frontend || true
  #           docker rm frontend || true
  #           docker stop backend || true
  #           docker rm backend || true
  #           docker stop nginx || true
  #           docker rm nginx || true

  #           # Run new containers with network
  #           docker network create app-network || true

  #           docker run -d --name frontend --network app-network -p 3000:3000 ${{ secrets.ECR_REGISTRY }}/sunday/community-frontend:latest
  #           docker run -d --name backend --network app-network -p 8000:8000 ${{ secrets.ECR_REGISTRY }}/sunday/community-backend:latest
  #           docker run -d --name nginx --network app-network -p 80:80 -p 443:443 ${{ secrets.ECR_REGISTRY }}/sunday/community-nginx:latest
